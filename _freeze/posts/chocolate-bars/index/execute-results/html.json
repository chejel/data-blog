{
  "hash": "905c196d3a3eb6b123095d9f1ba9ff4e",
  "result": {
    "markdown": "---\ntitle: \"Chocolate Bars\"\nauthor: \"\"\ndate: \"2022-03-28\"\ndate-modified: \"2023-04-05\"\ndescription: \"A color-coded world map made from a set of chocolate bar ratings.\"\ncategories: [ \"Tidy Tuesday\", R, map ]\nimage: \"\"\neditor_options: \n  chunk_output_type: console\n---\n\n## Introduction\n\nFor the week of January 18, 2022, [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) featured the \"Chocolate Bar Ratings\" dataset from [Flavors of Cacao](https://flavorsofcacao.com/chocolate_database.html). The reviews span from 2006 through 2022 and for each bar, details include the manufacturer and their location, the chocolate bean origin, ingredients and keyword-descriptions of each bar's \"most memorable characteristics, and of course, the rating.\n\nAs noted on the website, the chocolate included in the ratings database are a sampling of bars, not a comprehensive assessment of chocolate bars but rather rating dark chocolate bars based on one bar.\n\n\n::: {.callout-warning appearance=\"simple\" icon=false}\nEach chocolate is evaluated from a combination of both objective qualities and subjective interpretation. A rating here only represents an experience with one bar from one batch.\n<br />\n<span style=\"color:#d1d1d1\">(...)</span>\n<br />\nThe database is narrowly focused on plain dark chocolate with an aim of appreciating the flavors of the cacao when made into chocolate. \n:::\n\nLooking at a `glimpse` of the dataset...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nchocolate_raw <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-18/chocolate.csv')\n\nglimpse(chocolate_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,530\nColumns: 10\n$ ref                              <dbl> 2454, 2458, 2454, 2542, 2546, 2546, 2…\n$ company_manufacturer             <chr> \"5150\", \"5150\", \"5150\", \"5150\", \"5150…\n$ company_location                 <chr> \"U.S.A.\", \"U.S.A.\", \"U.S.A.\", \"U.S.A.…\n$ review_date                      <dbl> 2019, 2019, 2019, 2021, 2021, 2021, 2…\n$ country_of_bean_origin           <chr> \"Tanzania\", \"Dominican Republic\", \"Ma…\n$ specific_bean_origin_or_bar_name <chr> \"Kokoa Kamili, batch 1\", \"Zorzal, bat…\n$ cocoa_percent                    <chr> \"76%\", \"76%\", \"76%\", \"68%\", \"72%\", \"8…\n$ ingredients                      <chr> \"3- B,S,C\", \"3- B,S,C\", \"3- B,S,C\", \"…\n$ most_memorable_characteristics   <chr> \"rich cocoa, fatty, bready\", \"cocoa, …\n$ rating                           <dbl> 3.25, 3.50, 3.75, 3.00, 3.00, 3.25, 3…\n```\n:::\n:::\n\n\n...here are some initial observations about the variables:\n\n::: {.grid}\n::: {.g-col-10}\n| Variable | Details |\n| --- | --- |\n| Manufacturer | 580 companies |\n| Company location | 67 countries |\n| Year of review | 2006-2021 |\n| Country where bean originated | 62 countries |\n| Cocoa % | seeds (or beans) that produce chocolate |\n| Ingredients | B = beans, S = sugar, S* = sweetener (not white cane or beet sugar), C = cocoa butter, V = vanilla, L = lecithin, Sa = salt |\n| Most memorable characteristics | keywords |\n| Rating | 1-4 |\n\n:::\n:::\n\n## World Map\n\nAfter exploring the data, I went with mapping the countries in the dataset, color coding them by whether they:\n\n- only appear as the location of a manufacturing company\n- only appear as a bean origin country\n- or both\n\n::: {.cell}\n\n```{.r .cell-code}\n# Are there countries that appear in both columns? (33) Use #C0EDA6\ncountries_both <- chocolate_raw %>%\n  select(company_location, country_of_bean_origin) %>%\n  unique() %>%\n  # isolate countries in company_location that also appear in country_of_bean_origin\n  filter(company_location %in% unique(country_of_bean_origin)) %>%\n  # isolate only company_location and rename\n  select(country=company_location) %>%\n  unique() %>%\n  # add column that gives it green color to signify it appears in both vars\n  add_column(country_type=\"both\")\n\n# countries that appear only in company_location (34) Use #8FBDD3\ncountries_manufacturer <- chocolate_raw %>%\n  select(company_location, country_of_bean_origin) %>%\n  unique() %>%\n  filter(!company_location %in% unique(country_of_bean_origin)) %>%\n  select(country=company_location) %>%\n  unique() %>%\n  add_column(country_type=\"manufacturer\")\n\n# countries that appear only in country_of_bean_origin (29) Use #FFF7BC\nbean_countries <- chocolate_raw %>%\n  select(company_location, country_of_bean_origin) %>%\n  unique() %>%\n  filter(!country_of_bean_origin %in% unique(company_location)) %>%\n  select(country=country_of_bean_origin) %>%\n  unique() %>%\n  add_column(country_type=\"bean origin\")\n\n# combine above three into one df\nchocolate_map <- rbind(countries_both, countries_manufacturer, bean_countries)\n```\n:::\n\n\n### 1. Load world map via `rnaturalearth`\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\nworld_map <- ne_countries(scale=\"medium\",\n                          type=\"map_units\", # to include Mauritania\n                          returnclass=\"sf\")\n\nggplot() +\n  geom_sf(data=world_map, size=0.25, fill=\"#eeeeee\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n<hr />\n\n### 2. Data cleaning\n\na) Check if any country names in `world_map` and `chocolate_map` do not match, i.e. Which country names in `world_map` do not appear in `chocolate_map` due to spelling differences or more granular divisions within what `world_map` considers a country. Goal: Create a layer of just the countries in `chocolate_map` to \"layer\" on top of the `world_map` basemap.\n\n::: {.cell}\n\n```{.r .cell-code}\nchocolate_map %>% filter(!country %in% unique(world_map$geounit))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 2\n   country               country_type\n   <chr>                 <chr>       \n 1 U.S.A.                both        \n 2 Sao Tome              both        \n 3 St. Lucia             both        \n 4 Sao Tome & Principe   both        \n 5 St.Vincent-Grenadines both        \n 6 U.K.                  manufacturer\n 7 Belgium               manufacturer\n 8 Amsterdam             manufacturer\n 9 U.A.E.                manufacturer\n10 Burma                 bean origin \n11 Trinidad              bean origin \n12 Blend                 bean origin \n13 Congo                 bean origin \n14 Tobago                bean origin \n15 Sumatra               bean origin \n16 Principe              bean origin \n17 Sulawesi              bean origin \n18 DR Congo              bean origin \n```\n:::\n:::\n\n<hr />\nb) Renaming countries in `chocolate_map` to how they appear in `world_map`.\n\n::: {.cell}\n\n```{.r .cell-code}\nchocolate_map_edit <- chocolate_map %>%\n  # rename countries\n  mutate(country = str_replace_all(\n    country,\n    c(\n      \"U.S.A.\" = \"United States of America\", # old = new\n      \"Sao Tome$\" = \"Sao Tome and Principe\",\n      \"St. Lucia\" = \"Saint Lucia\",\n      \"Sao Tome & Principe\" = \"Sao Tome and Principe\",\n      \"St.Vincent-Grenadines\" = \"Saint Vincent and the Grenadines\",\n      \"U.A.E.\" = \"United Arab Emirates\",\n      \"Burma\" = \"Myanmar\",\n      \"^Trinidad$\" = \"Trinidad and Tobago\",\n      \"^Congo$\" = \"Republic of Congo\",\n      \"^Tobago$\" = \"Trinidad and Tobago\",\n      \"^Principe$\" = \"Sao Tome and Principe\",\n      \"DR Congo\" = \"Democratic Republic of the Congo\"\n    )\n  )) %>%\n  # renaming \"non-countries\" as the country in which they're located\n  mutate(country = str_replace_all(\n    country,\n    c(\n      \"Amsterdam\" = \"Netherlands\",\n      \"Sumatra\" = \"Indonesia\",\n      \"Sulawesi\" = \"Indonesia\"\n    )\n  )) %>%\n  # remove country of \"Blend\" and also \"Scotland\" and \"Wales\" as the latter two will be represented by \"United Kingdom\" (all three are only manufacturing countries, plus \"England\" and \"Northern Ireland\" were not included in the chocolate data)\n  filter(!country %in% c(\"Blend\", \"Scotland\", \"Wales\")) %>%\n  # renamings will produce duplicates so remove those\n  unique()\n```\n:::\n\n<hr />\nc) Check: Rerun code from `a` to see if any countries from `chocolate_map` remain off of `world_map`.\n\n::: {.cell}\n\n```{.r .cell-code}\nchocolate_map %>% filter(!country %in% unique(world_map$geounit))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 2\n   country               country_type\n   <chr>                 <chr>       \n 1 U.S.A.                both        \n 2 Sao Tome              both        \n 3 St. Lucia             both        \n 4 Sao Tome & Principe   both        \n 5 St.Vincent-Grenadines both        \n 6 U.K.                  manufacturer\n 7 Belgium               manufacturer\n 8 Amsterdam             manufacturer\n 9 U.A.E.                manufacturer\n10 Burma                 bean origin \n11 Trinidad              bean origin \n12 Blend                 bean origin \n13 Congo                 bean origin \n14 Tobago                bean origin \n15 Sumatra               bean origin \n16 Principe              bean origin \n17 Sulawesi              bean origin \n18 DR Congo              bean origin \n```\n:::\n:::\n\n<hr />\nd) Remove\n\n::: {.cell}\n\n```{.r .cell-code}\nchocolate_map_edit <- chocolate_map_edit %>% filter(!country %in% c(\"U.K.\", \"Belgium\"))\n```\n:::\n\n<hr />\ne) Workaround: Add a third layer for Belgium and the UK since their `geounit` in `world_map` was of regions within those countries so using the `admin` column here in place of `geounit` as used above.\n\n::: {.cell}\n\n```{.r .cell-code}\nchocolate_map <- chocolate_map %>%\n  mutate(country = str_replace(country, \"U.K.\", \"United Kingdom\"))\n\nbel_uk_layer <- world_map %>%\n  filter(admin %in% c(\"Belgium\", \"United Kingdom\")) %>%\n  left_join(chocolate_map, by=c(\"admin\"=\"country\"))\n```\n:::\n\n<hr />\nf) `right_join()` the `world_map` and `chocolate_map_edit` dataframes in order to add geographic components to `chocolate_map_edit`.\n\n::: {.cell}\n\n```{.r .cell-code}\ncombo_map <- world_map %>% right_join(chocolate_map_edit, by=c(\"geounit\"=\"country\"))\n```\n:::\n\n\n### 3. Chocolate map\n\nAdding the three layers: (1) `world_map`: Base world map + (2) `combo_map`: Countries from the chocolate data + (3) `bel_uk_layer`: Belgium and the UK\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data=world_map, size=0.25, fill=\"#eeeeee\") +\n  geom_sf(data=combo_map, aes(fill=country_type), size=0.25, show.legend=F) +\n  geom_sf(data=bel_uk_layer, aes(fill=country_type), size=0.25, show.legend=F) +\n  scale_fill_manual(values = c(\"both\" = \"#C0EDA6\", # df value = color\n                               \"manufacturer\" = \"#8FBDD3\",\n                               \"bean origin\" = \"#FFF7BC\")) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n## Out of Curiosity\n\nAre there words disproportionately associated with a country where a bean originated or a a country of the manufacturing company? \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidytext)\n\nchocolate_raw %>%\n  unnest_tokens(word, most_memorable_characteristics) %>%\n  count(country_of_bean_origin, word, sort = TRUE) %>%\n  bind_tf_idf(term = word, document = country_of_bean_origin, n) %>% # calculates TF-IDF\n  arrange(desc(tf_idf)) %>%\n  #top_n(20, wt = tf_idf) %>%\n  filter(n>20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 36 × 6\n   country_of_bean_origin word       n     tf   idf tf_idf\n   <chr>                  <chr>  <int>  <dbl> <dbl>  <dbl>\n 1 Papua New Guinea       smoke     27 0.155  1.13  0.176 \n 2 Ecuador                floral    82 0.112  0.795 0.0893\n 3 Madagascar             red       25 0.0394 1.82  0.0719\n 4 Madagascar             sour      44 0.0694 0.631 0.0438\n 5 Venezuela              nutty     88 0.102  0.389 0.0397\n 6 Madagascar             tart      23 0.0363 1.08  0.0393\n 7 Blend                  bitter    24 0.0440 0.795 0.0350\n 8 Ecuador                bitter    30 0.0411 0.795 0.0327\n 9 Blend                  sweet     31 0.0569 0.490 0.0278\n10 Madagascar             fruit     36 0.0568 0.490 0.0278\n# … with 26 more rows\n```\n:::\n\n```{.r .cell-code}\nchocolate_raw %>%\n  unnest_tokens(word, most_memorable_characteristics) %>%\n  #count(word, country_of_bean_origin, sort = TRUE) %>%\n  count(word, company_location, sort = TRUE) %>%\n  filter(word == \"smoke\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 3\n   word  company_location     n\n   <chr> <chr>            <int>\n 1 smoke U.S.A.              26\n 2 smoke France              10\n 3 smoke Canada               5\n 4 smoke Italy                4\n 5 smoke New Zealand          4\n 6 smoke Australia            3\n 7 smoke U.K.                 3\n 8 smoke Austria              2\n 9 smoke Colombia             2\n10 smoke Japan                2\n11 smoke Ecuador              1\n12 smoke Germany              1\n13 smoke U.A.E.               1\n14 smoke Venezuela            1\n```\n:::\n\n```{.r .cell-code}\n# instead of going by word units, break up by placement of comma => there will be one word, two words, etc.\nchocolate_raw %>%\n  select(most_memorable_characteristics, rating) %>%\n  # split at comma\n  separate_rows(most_memorable_characteristics, sep = ',', convert = TRUE) %>%\n  #filter(str_detect(most_memorable_characteristics, regex(\" \"))) %>%\n  group_by(most_memorable_characteristics) %>%\n  summarize(characteristic_count = n(), mean_rating = median(rating)) %>%\n  filter(characteristic_count>20) %>% arrange(desc(mean_rating))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 71 × 3\n   most_memorable_characteristics characteristic_count mean_rating\n   <chr>                                         <int>       <dbl>\n 1 \" banana\"                                        33         3.5\n 2 \" cherry\"                                        27         3.5\n 3 \" citrus\"                                        21         3.5\n 4 \" cocoa\"                                        210         3.5\n 5 \" creamy\"                                        26         3.5\n 6 \" dairy\"                                         34         3.5\n 7 \" dried fruit\"                                   46         3.5\n 8 \" fruity\"                                        37         3.5\n 9 \" honey\"                                         26         3.5\n10 \" melon\"                                         22         3.5\n# … with 61 more rows\n```\n:::\n\n```{.r .cell-code}\nchocolate_raw %>%\n  separate_rows(most_memorable_characteristics, sep = ',', convert = TRUE) %>%\n  mutate(most_memorable_characteristics = str_squish(most_memorable_characteristics)) %>%\n  count(country_of_bean_origin, most_memorable_characteristics, sort = TRUE) %>%\n  bind_tf_idf(term = most_memorable_characteristics, document = country_of_bean_origin, n) %>%\n  arrange(desc(tf_idf)) %>%\n  filter(n>20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21 × 6\n   country_of_bean_origin most_memorable_characteris…¹     n     tf   idf tf_idf\n   <chr>                  <chr>                        <int>  <dbl> <dbl>  <dbl>\n 1 Ecuador                floral                          72 0.12   0.831 0.0998\n 2 Venezuela              nutty                           84 0.116  0.414 0.0481\n 3 Madagascar             sour                            27 0.0557 0.795 0.0443\n 4 Blend                  sweet                           27 0.0609 0.490 0.0298\n 5 Venezuela              creamy                          33 0.0457 0.601 0.0275\n 6 Blend                  cocoa                           26 0.0587 0.438 0.0257\n 7 Dominican Republic     earthy                          35 0.0546 0.464 0.0253\n 8 Ecuador                spicy                           21 0.035  0.693 0.0243\n 9 Venezuela              roasty                          33 0.0457 0.516 0.0236\n10 Dominican Republic     spicy                           21 0.0328 0.693 0.0227\n# … with 11 more rows, and abbreviated variable name\n#   ¹​most_memorable_characteristics\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}