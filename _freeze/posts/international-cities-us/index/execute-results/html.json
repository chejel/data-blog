{
  "hash": "91fa9ae2439e819f08a5e0660e59e8cc",
  "result": {
    "markdown": "---\ntitle: \"International Place Names Inside the U.S.\"\nauthor: \"\"\ndate: 2021-07-27\ndate-modified: 2024-02-16\ndescription: \"Identifying U.S. municipalities that share a name, or part of their name, with a major international city.\"\ncategories: [ map, R ]\nimage: \"intl-cities-ss.png\"\nimage-alt: \"\"\neditor_options: \n  chunk_output_type: console\n---\n\n\nThis post describes how I put together the dataset for <a href=\"https://chejel.github.io/intl-cities-us\" target=\"_blank\">this map</a> that finds US municipalities that match or include as part of its name a country or international city in English.\n\n<a href=\"https://chejel.github.io/intl-cities-us\" target=\"_blank\"><img src=\"./intl-cities-ss.png\" alt=\"Screenshot of project page\" width=\"450\"></a>\n<hr />\n\n## Gathering the data\n\n#### Dataset: Names of municipalities in the US\n\nThe **[U.S. Board on Geographic Names](https://www.usgs.gov/us-board-on-geographic-names)** has available the names of **geographic entities** in U.S. states, including municipalities, buildings, properties, natural features and more. Data is also available on geographic names across the world.\n\nFor this exercise, I downloaded the file `PopulatedPlaces_National_Text.zip` via the U.S. Board on Geographic Names' [Domestic Names](https://www.usgs.gov/us-board-on-geographic-names/domestic-names) page (under \"Direct Link to All Names Data Products\"):\n\n\n\nAfter scanning through the dataset, I'm removing places with `(historical)` in the name and without a geographic location provided.\n\n::: {.cell}\n\n```{.r .cell-code}\nus_muni_edit <- us_muni %>%\n  filter(!str_detect(feature_name, regex(\"(historical)\"))) %>%\n  filter(!prim_lat_dec==0) %>%\n  # remove white space\n  mutate(feature_name = str_squish(feature_name))\n```\n:::\n\n\n\n#### Dataset: Names of countries and international cities\n\nThe `maps` [package](https://cran.r-project.org/web/packages/maps/index.html) provides a list of cities via the `world.cities` dataframe, which includes the country name, population, latitude and longitude coordinates, and whether the city is the capital.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(maps::world.cities)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 43,645\nColumns: 6\n$ name        <chr> \"'Abasan al-Jadidah\", \"'Abasan al-Kabirah\", \"'Abdul Hakim\"…\n$ country.etc <chr> \"Palestine\", \"Palestine\", \"Pakistan\", \"Kuwait\", \"Palestine…\n$ pop         <int> 5629, 18999, 47788, 21817, 2456, 3434, 9198, 5492, 22706, …\n$ lat         <dbl> 31.31, 31.32, 30.55, 29.36, 32.03, 32.03, 9.77, 2.75, 32.0…\n$ long        <dbl> 34.34, 34.35, 72.11, 47.98, 35.07, 35.20, 44.65, 46.30, 45…\n$ capital     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n\n- To narrow down the more than 43,500 cities, I'll filter for only cities with **more than 1 million residents**, not including metro areas.\n- For each country and international city name, I will add to the end of each name `\\\\b`, the **regular expression** to indicate that it's the end of the word. This way, I will be able to search for US municipalities that contain the **name on its own**, either by itself or with another word but not as part of a word: This would include \"*Canada* Shores, Michigan\" but not \"*Jordan*town, New Jersey.\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncities_1m <- maps::world.cities %>%\n  # include only cities with more than 1m people\n  filter(pop > 1000000) %>%\n  # remove US cities\n  filter(country.etc != \"USA\") %>%\n  # add regex to city and country names so that results won't return int'l names within a US city\n  mutate(city_regex = paste0(name, \"\\\\b\")) %>%\n  mutate(country_regex = paste0(country.etc, \"\\\\b\"))\n\n# since I'm taking a random sample of five rows, I will use set.seed() to get the same five rows each time the code is run\nset.seed(10)\nsample_n(cities_1m, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      name  country.etc      pop    lat   long capital  city_regex\n1    Kazan       Russia  1104802  55.75  49.13       0    Kazan\\\\b\n2    Delhi        India 11215130  28.67  77.21       0    Delhi\\\\b\n3 Pretoria South Africa  1687779 -25.73  28.22       1 Pretoria\\\\b\n4   Tehran         Iran  7160094  35.67  51.43       1   Tehran\\\\b\n5     Kobe        Japan  1535384  34.68 135.17       0     Kobe\\\\b\n    country_regex\n1       Russia\\\\b\n2        India\\\\b\n3 South Africa\\\\b\n4         Iran\\\\b\n5        Japan\\\\b\n```\n:::\n:::\n\n\n<hr />\n\n## Matching countries\n\nTo **\"match\" US names to country names**:\n\n- The column of country names, which will have repeated names, from the `cities_1m` dataframe (above) will be **separated by a vertical bar** (`|`) so that each country name will be searched for among the column of US names and if found, the US names containing a country name will be \"extracted\" (i.e. kept) in the final list. This will go in the `match` column.\n- Add a column containing the continent name based on the country names in the `match` column using the `countrycode` package. ([source](https://stackoverflow.com/questions/64433772/adding-continent-region-column-to-data-frame-using-countrycode-package))\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_matches <- us_muni_edit %>%\n  # match US city to country names\n  mutate(match = str_extract(feature_name, paste(cities_1m$country_regex, collapse=\"|\"))) %>%\n  drop_na(match) %>% # remove US names that did not \"match\" any country name\n  # add continent\n  mutate(continent = countrycode::countrycode(sourcevar = match,\n                                              origin = \"country.name\", \n                                              destination = \"continent\"))\n  # narrow down variables\n```\n:::\n\n\nA sample of the final dataframe of US municipalities that now includes the name of a country.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # set.seed() lets you see the same random sample each time you run the code\nsample_n(country_matches, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   feature_id               feature_name   feature_class    state_name\n1     1379539                China Creek Populated Place         Texas\n2     1554236                       Cuba Populated Place West Virginia\n3      607936                       Peru Populated Place Massachusetts\n4     2481457            Armenia Terrace Populated Place       Florida\n5      669699                      Egypt Populated Place   Mississippi\n6      490449                       Cuba Populated Place      Kentucky\n7     1049099              Poland Center Populated Place          Ohio\n8      867976                    Lebanon Populated Place New Hampshire\n9      942484 Angola Lake Shore Addition Populated Place      New York\n10      57707                      Egypt Populated Place      Arkansas\n   state_numeric  county_name county_numeric         map_name date_created\n1             48     San Saba            411 Blucher Mountain   11/30/1979\n2             54      Jackson             35       Sandyville   06/27/1980\n3             25    Berkshire              3             Peru   02/24/1974\n4             12 Hillsborough             57  Sulphur Springs   07/18/2008\n5             28       Holmes             51       Montgomery   09/24/1980\n6             21       Graves             83             Cuba   09/20/1979\n7             39     Mahoning             99         Campbell   07/12/1979\n8             33      Grafton              9          Hanover   08/27/1980\n9             36         Erie             29          Farnham   01/23/1980\n10             5    Craighead             31             Cash   04/30/1980\n   date_edited bgn_type bgn_authority bgn_date prim_lat_dms prim_long_dms\n1   06/07/2022                                      311533N      0984723W\n2   06/07/2022                                      385928N      0814008W\n3   12/02/2019                                      422617N      0730245W\n4   06/07/2022                                      280005N      0822910W\n5   06/07/2022                                      332028N      0901638W\n6   06/07/2022                                      363506N      0883745W\n7   09/30/2019                                      410126N      0803402W\n8   06/07/2022                                      433832N      0721506W\n9   09/11/2019                                      423705N      0790554W\n10  06/07/2022                                      355205N      0905644W\n   prim_lat_dec prim_long_dec   match continent\n1      31.25906     -98.78977   China      Asia\n2      38.99119     -81.66902    Cuba  Americas\n3      42.43814     -73.04593    Peru  Americas\n4      28.00140     -82.48600 Armenia      Asia\n5      33.34123     -90.27731   Egypt    Africa\n6      36.58506     -88.62922    Cuba  Americas\n7      41.02395     -80.56729  Poland    Europe\n8      43.64229     -72.25176 Lebanon      Asia\n9      42.61811     -79.09837  Angola    Africa\n10     35.86813     -90.94568   Egypt    Africa\n```\n:::\n:::\n\n<hr />\n\n## Matching international cities\n\nFollowing the same steps above, this time matching US municipalities to international city names. And:\n\n- Joining this dataframe with the `cities_1m` in order to include the country for each city.\n- As \"Serbia and Montenegro\" was given as the country for \"Belgrade\", changing the name to \"Serbia\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_matches <- us_muni_edit %>%\n  # match US city to int'l city names\n  mutate(match = str_extract(feature_name, paste(cities_1m$city_regex, collapse=\"|\"))) %>%\n  drop_na(match) %>%\n  # add country to match (city)\n  left_join(cities_1m, by = c(\"match\" = \"name\")) %>%\n  select(-lat, -long) %>% # removing these cols from cities_1m to avoid confusion\n  # change \"Serbia and Montenegro\" to \"Serbia\"\n  mutate(country.etc = str_replace(country.etc, \"Serbia and Montenegro\", \"Serbia\")) %>%\n  # add continent\n  mutate(continent = countrycode::countrycode(sourcevar = country.etc,\n                                              origin = \"country.name\", \n                                              destination = \"continent\")) %>%\n  # add coordinates for the int'l cities using tidygeocoder pkg\n  mutate(address = paste0(match, \", \", country.etc)) %>%\n  geocode(address, method=\"osm\", lat=city_lat, long=city_long) %>%\n  # narrow down columns\n  select(us_city=feature_name, state_name, us_city_lat=prim_lat_dec, us_city_long=prim_long_dec, intl_city=match, country=country.etc, city_lat, city_long, continent)\n```\n:::\n\n\nA sample of the final dataframe for US towns and cities containing the names of international cities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# see sample of result\nset.seed(123)\nsample_n(city_matches, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 9\n   us_city       state…¹ us_ci…² us_ci…³ intl_…⁴ country city_…⁵ city_…⁶ conti…⁷\n   <chr>         <chr>     <dbl>   <dbl> <chr>   <chr>     <dbl>   <dbl> <chr>  \n 1 New London    North …    35.4   -80.2 London  UK         51.5  -0.128 Europe \n 2 Delhi         Ohio       39.1   -84.6 Delhi   India      28.6  77.2   Asia   \n 3 Tripoli       Iowa       42.8   -92.3 Tripoli Libya      32.9  13.2   Africa \n 4 Paris Point   South …    34.9   -82.4 Paris   France     48.9   2.35  Europe \n 5 Hamburg       Kansas     38.1   -99.2 Hamburg Germany    53.6  10.0   Europe \n 6 Brussels      Illino…    38.9   -90.6 Brusse… Belgium    50.9   4.35  Europe \n 7 Melbourne     Missou…    40.1   -93.8 Melbou… Austra…   -37.8 145.    Oceania\n 8 North Belgra… Maine      44.5   -69.8 Belgra… Serbia     44.8  20.5   Europe \n 9 New London    Maryla…    39.4   -77.3 London  UK         51.5  -0.128 Europe \n10 Prague        Arkans…    34.3   -92.3 Prague  Czech …    50.1  14.4   Europe \n# … with abbreviated variable names ¹​state_name, ²​us_city_lat, ³​us_city_long,\n#   ⁴​intl_city, ⁵​city_lat, ⁶​city_long, ⁷​continent\n```\n:::\n:::\n\n<hr />\n\n## A Final List\n\nAfter exporting `city_matches` via `write_csv(city_matches, \"city_matches.csv\")`, I used `D3.js` to <a href=\"https://chejel.github.io/intl-cities-us\">create a map</a> that lets users click a major non-US city and see the locations of US towns and cities that share the name. I'll save `country_matches` maybe for another time. \n\nTo end this post, here are the top 10 international cities that appear most frequently as or within US municipality names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_matches %>% count(intl_city, sort=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 71 × 2\n   intl_city     n\n   <chr>     <int>\n 1 Berlin       57\n 2 London       49\n 3 Paris        46\n 4 Dublin       38\n 5 Rome         37\n 6 Hamburg      35\n 7 Leon         33\n 8 Cairo        30\n 9 Vienna       29\n10 Damascus     27\n# … with 61 more rows\n```\n:::\n:::\n\n\n-----",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}