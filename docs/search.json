[
  {
    "objectID": "posts/eurovision/index.html",
    "href": "posts/eurovision/index.html",
    "title": "A Eurovision History",
    "section": "",
    "text": "Final result: See full chart below."
  },
  {
    "objectID": "posts/eurovision/index.html#exploring-the-dataset",
    "href": "posts/eurovision/index.html#exploring-the-dataset",
    "title": "A Eurovision History",
    "section": "Exploring the dataset",
    "text": "Exploring the dataset\n\n\n\n\n\n\nAn American attempts to explain Eurovision\n\n\n\n\n\nEvery year, more than 40 countries across Europe, and from other continents, participate in the Eurovision Song Contest, a continent (and beyond)-wide extravaganza complete with sparkles and Hard Rock Hallelujah. In the case of the dataset, it lists every artist and song performed on the show since the inaugural show in 1956. The competition has been held annually since then, except in 2020.\n\n\n\nA bit of wrangling of this dataset can give some insight into how the history of the competition and how it has changed through the decades to include more countries. Here‚Äôs a glimpse of the original dataset:\n\nglimpse(eurovision)\n\nRows: 2,005\nColumns: 18\n$ event          <chr> \"Turin 2022\", \"Turin 2022\", \"Turin 2022\", \"Turin 2022\",‚Ä¶\n$ host_city      <chr> \"Turin\", \"Turin\", \"Turin\", \"Turin\", \"Turin\", \"Turin\", \"‚Ä¶\n$ year           <dbl> 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2‚Ä¶\n$ host_country   <chr> \"Italy\", \"Italy\", \"Italy\", \"Italy\", \"Italy\", \"Italy\", \"‚Ä¶\n$ event_url      <chr> \"https://eurovision.tv/event/turin-2022\", \"https://euro‚Ä¶\n$ section        <chr> \"first-semi-final\", \"first-semi-final\", \"first-semi-fin‚Ä¶\n$ artist         <chr> \"Kalush Orchestra\", \"S10\", \"Amanda Georgiadi Tenfjord\",‚Ä¶\n$ song           <chr> \"Stefania\", \"De Diepte\", \"Die Together\", \"Saudade, Saud‚Ä¶\n$ artist_url     <chr> \"https://eurovision.tv/participant/kalush-orchestra-22\"‚Ä¶\n$ image_url      <chr> \"https://static.eurovision.tv/hb-cgi/images/963164d0-06‚Ä¶\n$ artist_country <chr> \"Ukraine\", \"Netherlands\", \"Greece\", \"Portugal\", \"Bulgar‚Ä¶\n$ country_emoji  <chr> \":flag_ua:\", \":flag_nl:\", \":flag_gr:\", \":flag_pt:\", \":f‚Ä¶\n$ running_order  <dbl> 6, 8, 15, 10, 7, 5, 17, 16, 3, 9, 4, 14, 11, 1, 12, 2, ‚Ä¶\n$ total_points   <dbl> 337, 221, 211, 208, 29, 15, 187, 177, 159, 154, 118, 10‚Ä¶\n$ rank           <dbl> 1, 2, 3, 4, 16, 17, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, ‚Ä¶\n$ rank_ordinal   <chr> \"1st\", \"2nd\", \"3rd\", \"4th\", \"16th\", \"17th\", \"5th\", \"6th‚Ä¶\n$ qualified      <lgl> TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE,‚Ä¶\n$ winner         <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,‚Ä¶\n\n\nTo start off, how many countries have participated each year?\n\n# divide up years on x-axis by decades\ndecade_breaks <- c(1960,1970,1980,1990,2000,2010,2020)\n\neurovision %>%\n  select(year, artist_country) %>%\n  distinct() %>%\n  count(year) %>%\n  ggplot(aes(x=year, y=n)) + \n  geom_col(fill=\"#F7C04A\", color=\"black\", size=0.25, alpha=0.6, width=1, show.legend=FALSE) +\n  scale_x_continuous(limits=c(1955,2023),\n                     breaks=decade_breaks,\n                     expand=c(0, 0)) +\n  scale_y_continuous(expand=c(0, 0), limits=c(0, 45)) +\n  theme_minimal() +\n  theme(plot.title = element_text(family=\"DM Serif Display\", size=rel(1.75)),\n        plot.title.position = \"plot\",\n        legend.position = \"top\", \n        legend.justification = \"left\",\n        legend.direction = \"horizontal\",\n        legend.background = element_rect(fill=\"#fff7f5\", color=NA),\n        legend.text = element_text(margin=margin(r=0.28, unit=\"cm\"), size=10),\n        legend.box.margin = margin(c(0,0,0,-77)),\n        text = element_text(family=\"Trade Gothic LT Std\", color=\"#313131\"),\n        plot.caption = element_textbox_simple(color=\"#666666\"),\n        axis.title = element_text(size=rel(0.75), color=\"#525E75\"),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.y = element_line(size=0.15),\n        panel.grid.major.y = element_line(size=0.2)) +\n  labs(title=\"Eurovision: Number of Participating Countries by Year\",\n       caption=NULL,\n       x=\"Year\",\n       y=\"Number of countries\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n‚Ñπ Please use `linewidth` instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n‚Ñπ Please use the `linewidth` argument instead.\n\n\n\n\n\n Note: While the competition was not held in 2020, the list of participants had already been determined. Also, what happened in 1970?1\nEach row of the dataset includes, among other details, the year, song and singer, as well as the stage of the competition in which the performance took place. A look into the data reveals how over the years, the contest has expanded to include more countries, which in turn led to multiple segments of the eshow.\nWhich years had which segments?\n\neurovision %>%\n  # keep only select variables\n  select(host_city, year, host_country, section) %>%\n  distinct() %>%\n  # combine sections (ex. merge \"semi-final\" and \"grand-final\" rows that are in the same year into \"semi-final, grand-final\")\n  group_by(year) %>% \n  mutate(sections = paste0(section, collapse = \", \")) %>%\n  # How many of each type of combination of competition sections?\n  count(sections) %>% \n  ungroup() %>%\n  group_by(sections) %>%\n  # for each section, get the earliest and latest year to get range\n  summarize(first_year = min(year), last_year = max(year)) %>%\n  # sort by earliest year\n  arrange(first_year) %>% \n  select(Sections=sections, `Earliest year`=first_year, `Latest year`=last_year) %>%\n  kable()\n\n\n\n\n\n\n\n\n\nSections\nEarliest year\nLatest year\n\n\n\n\nfinal\n1956\n2003\n\n\nsemi-final, grand-final\n2004\n2007\n\n\nfirst-semi-final, second-semi-final, grand-final\n2008\n2022\n\n\n\n\n\n Results: For nearly 50 years, the competition included only one level, the ‚Äúfinal‚Äù show. In 2004, following an influx of new participating countries, organizers introduced the semi-final stage, the top 10 of which proceeded to the final ‚Äì along with the top 10 from the 2003 final, the host country and the five automatically qualifying countries of France, Germany, Italy, Spain and the UK.\nIn 2008, the competition started holding two simultaneous semi-finals with qualifiers from each section (along with üá´üá∑ üá©üá™ üáÆüáπ üá™üá∏ üá¨üáß and the host country) making up the finalists.2\nAs evident in the dataset, only in 1956 did each of the participating countries (seven at the time) have two performances, either performed by the same or different people, with only two rankings in the end: One entry, representing the host country of Switzerland, (Lys Assia performing Refrain) placed first while the other 13 performances placed ‚Äúsecond,‚Äù at least in the sense that ranked results beyond the winner were not announced.\n\neurovision %>%\n  filter(year==1956) %>%\n  arrange(rank) %>%\n  select(Artist=artist, Song=song, `Artist's Country`=artist_country, Rank=rank) %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nArtist\nSong\nArtist‚Äôs Country\nRank\n\n\n\n\nLys Assia\nRefrain\nSwitzerland\n1\n\n\nTonina Torielli\nAmami Se Vuoi\nItaly\n2\n\n\nMich√®le Arnaud\nLes Amants De Minuit\nLuxembourg\n2\n\n\nDany Dauberson\nIl Est L√†\nFrance\n2\n\n\nFreddy Quinn\nSo Geht Das Jede Nacht\nGermany\n2\n\n\nMony Marc\nLe Plus Beau Jour De Ma Vie\nBelgium\n2\n\n\nCorry Brokken\nVoorgoed Voorbij\nNetherlands\n2\n\n\nFranca Raimondi\nAprite Le Finestre\nItaly\n2\n\n\nMich√®le Arnaud\nNe Crois Pas\nLuxembourg\n2\n\n\nMath√© Alt√©ry\nLe Temps Perdu\nFrance\n2\n\n\nWalter Andreas Schwarz\nIm Wartesaal Zum Gro√üen Gl√ºck\nGermany\n2\n\n\nFud Leclerc\nMessieurs Les Noy√©s De La Seine\nBelgium\n2\n\n\nLys Assia\nDas Alte Karussell\nSwitzerland\n2\n\n\nJetty Paerl\nDe Vogels Van Holland\nNetherlands\n2"
  },
  {
    "objectID": "posts/eurovision/index.html#visualization",
    "href": "posts/eurovision/index.html#visualization",
    "title": "A Eurovision History",
    "section": "Visualization",
    "text": "Visualization\nThe visualization will include only the countries that have made it to at least one final stage of a competition. I have manipulated the data accordingly. Here‚Äôs a random sample of the result:\n\neurovision_plot <- eurovision %>%\n  select(year, section, artist_country, rank) %>%\n  distinct() %>%\n  # narrow down to winners and non-winners\n  filter(section==\"final\" | section==\"grand-final\") %>%\n  group_by(year) %>%\n  arrange(rank) %>%\n  # remove non-winners of 1956 as other ranks were not specified\n  filter(!(year==1956 & rank==1)) %>% \n  arrange(-year) %>% # order by most recent\n  # assign placement to make it easier to assign color\n  mutate(rank_text = case_when(\n    rank==1 ~ \"First\",\n    rank==2 ~ \"Second\",\n    rank==3 ~ \"Third\",\n    rank==max(rank)-2 ~ \"Bottom 3\",\n    rank==max(rank)-1 ~ \"Bottom 3\",\n    rank==max(rank) ~ \"Bottom 3\")) %>%\n  ungroup() %>%\n  select(artist_country, year, rank, rank_text) %>% \n  arrange(artist_country)\n\neurovision_plot %>% \n  select(Country=artist_country, Year=year, Rank=rank, `Rank group`=rank_text) %>%\n  sample_n(5) %>%\n  kable()\n\n\n\n\nCountry\nYear\nRank\nRank group\n\n\n\n\nNorway\n1979\n11\nNA\n\n\nSweden\n2015\n1\nFirst\n\n\nAustria\n2017\n16\nNA\n\n\nDenmark\n2012\n23\nNA\n\n\nSweden\n1996\n3\nThird\n\n\n\n\n\n\nAre there any countries that never made it to a final stage?\n\nsetdiff(eurovision$artist_country, eurovision_plot$artist_country) %>%\n  sort() %>% # alphabetize\n  paste0(., collapse = \", \") # transform to single element of countries separated by commas that can be selected and copied into the ggplot code\n\n[1] \"Andorra\"\n\n\nHere is the visualization:\n\nshapes <- c(\"First\"=24, \"Second\"=24, \"Third\"=24, \"Bottom 3\"=25)\n\nrank_colors <- c(\"First\"=\"#FFC600\", \"Second\"=\"#73777B\", \"Third\"=\"#AD7A54\", \"Bottom 3\" = \"#E83A14\")\n\ny_limits <- c(1955,2023)\n\ny_breaks <- seq(1956,2022,2)\n\nplot_theme <- theme(text = element_text(family = \"IBM Plex Sans\", color = \"#383838\"),\n          axis.text.y = element_text(size=rel(0.8)),\n          axis.text.x = element_text(family=\"DM Serif Display\", size=rel(1.25)),\n          plot.title = element_text(family=\"DM Serif Display\", size=rel(1.5), hjust = 0.5),\n          plot.title.position = \"plot\",\n          plot.subtitle = element_textbox_simple(color = \"#383838\", hjust = 0.5, size=rel(0.8)),\n          plot.caption = element_textbox_simple(color = \"#818181\", size=rel(0.7)),\n          # legend\n          legend.position = \"top\", \n          legend.justification = \"left\",\n          legend.direction = \"horizontal\",\n          #legend.box.margin = margin(c(-5,0,-10,-115)),\n          legend.text = element_text(margin = margin(r = 0.4, unit = 'cm'), size=rel(0.7)),\n          legend.title = element_blank(),\n          legend.background = element_blank(),\n          legend.key = element_blank(), # color around symbol in legend\n          # lines for countries\n          panel.grid.major.y = element_line(size = 0.2, color = \"#383838\"),\n          axis.ticks.y = element_line(size = 0.2, color = \"#383838\"),\n          # lines for labeled years\n          panel.grid.major.x = element_line(size = 0.25, color = \"#847e7e\", linetype = 2),\n          panel.grid.minor.x = element_line(size = 0.2, color = \"#b7b2b2\", linetype = 2), #e0dede\n          axis.ticks.x = element_line(size = 0.25, color = \"#847e7e\"),\n          panel.background = element_blank(),\n          plot.background = element_rect(fill = \"transparent\", color = NA)) \n\neurovision_earliest_yr <- eurovision %>%\n  # create df of when country joined\n  select(year, section, artist_country) %>%\n  group_by(artist_country) %>%\n  summarize(earliest_yr = min(year)) %>%\n  # create character vector of just color numbers in same order as unique list of the countries\n  right_join(eurovision_plot)\n\neurovision_earliest_yr %>%\n  mutate(country_year = paste0(\"<strong>\",artist_country,\"</strong> <span style='color:#818181; font-size: 8px;'>\", earliest_yr, \"</span>\")) %>%\n  mutate(country_year = fct_rev(country_year)) %>%\n  ggplot(aes(x=country_year, y=year, fill=rank_text), color=\"white\") +\n  geom_point(aes(shape=rank_text), color=\"transparent\", size=1.5) +\n  scale_shape_manual(values=shapes) +\n  scale_fill_manual(values=rank_colors) +\n  scale_y_continuous(limits=y_limits,\n                     breaks=decade_breaks,\n                     minor_breaks=y_breaks,\n                     expand = c(0, 0),\n                     position=\"right\") +\n  plot_theme +\n  theme(axis.text.y = element_markdown()) +\n  coord_flip() +\n  annotate(\"rect\",\n           ymin = -Inf,\n           ymax = 2003,\n           xmin = -Inf,\n           xmax = Inf,\n           fill = \"#D7E9B9\", alpha = 0.3) +\n  annotate(\"rect\",\n           ymin = 2003,\n           ymax = 2007,\n           xmin = -Inf,\n           xmax = Inf,\n           fill = \"#FFD495\", alpha = 0.3) +\n  annotate(\"rect\",\n           ymin = 2007,\n           ymax = Inf,\n           xmin = -Inf,\n           xmax = Inf,\n           fill = \"#FAAB78\", alpha = 0.3) +\n  labs(title=\"Eurovision: Top and Bottom 3\",\n         subtitle=\"<br />From <span style='color: #5e842c;'>1956 through 2003, the contest only had a final round</span> whereas from <span style='color: #fd9d3a;'>2004 to 2007, the competition introduced an additional semi-final round</span>. Since <span style='color: #e54111;'>2008, Eurovision has had two simultaneous semi-finals</span> in addition to the grand final.\",\n         caption=\"<br />A ranking may include multiple countries. The inaugural competition in 1956 was not included due to only the winner being announced (Switzerland).\",\n         x=NULL, y=NULL)"
  },
  {
    "objectID": "posts/eurovision/index.html#code-for-next-time",
    "href": "posts/eurovision/index.html#code-for-next-time",
    "title": "A Eurovision History",
    "section": "Code for next time",
    "text": "Code for next time"
  },
  {
    "objectID": "posts/international-cities-us/index.html",
    "href": "posts/international-cities-us/index.html",
    "title": "International Place Names Inside the U.S.",
    "section": "",
    "text": "This post describes how I put together the dataset for this map that finds US municipalities that match or include as part of its name a country or international city in English."
  },
  {
    "objectID": "posts/international-cities-us/index.html#gathering-the-data",
    "href": "posts/international-cities-us/index.html#gathering-the-data",
    "title": "International Place Names Inside the U.S.",
    "section": "Gathering the data",
    "text": "Gathering the data\n\nDataset: Names of municipalities in the US\nThe U.S. Board on Geographic Names has available the names of geographic entities in U.S. states, including municipalities, buildings, properties, natural features and more. Data is also available on geographic names across the world.\nFor this exercise, I downloadeded the file PopulatedPlaces_National_Text.zip via the Domestic Names page:\nAfter scanning through the dataset, I‚Äôm removing places with (historical) in the name and without a geographic location provided.\n\nus_muni_edit <- us_muni %>%\n  filter(!str_detect(feature_name, regex(\"(historical)\"))) %>%\n  filter(!prim_lat_dec==0) %>%\n  # remove white space\n  mutate(feature_name = str_squish(feature_name))\n\n\n\nDataset: Names of countries and international cities\nThe maps package provides a list of cities via the world.cities dataframe, which includes the country name, population, latitude and longitude coordinates, and whether the city is the capital.\n\nglimpse(maps::world.cities)\n\nRows: 43,645\nColumns: 6\n$ name        <chr> \"'Abasan al-Jadidah\", \"'Abasan al-Kabirah\", \"'Abdul Hakim\"‚Ä¶\n$ country.etc <chr> \"Palestine\", \"Palestine\", \"Pakistan\", \"Kuwait\", \"Palestine‚Ä¶\n$ pop         <int> 5629, 18999, 47788, 21817, 2456, 3434, 9198, 5492, 22706, ‚Ä¶\n$ lat         <dbl> 31.31, 31.32, 30.55, 29.36, 32.03, 32.03, 9.77, 2.75, 32.0‚Ä¶\n$ long        <dbl> 34.34, 34.35, 72.11, 47.98, 35.07, 35.20, 44.65, 46.30, 45‚Ä¶\n$ capital     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0‚Ä¶\n\n\n\nTo narrow down the more than 43,500 cities, I‚Äôll filter for only cities with more than 1 million residents.\nFor each country and international city name, I will add to the end of each name \\\\b, the regular expression marking that it‚Äôs the end of the word. This way, I will be able to search for US municipalities that contain the name on its own, either by itself or with another word but not as part of a word: This would include ‚ÄúCanada Shores, Michigan‚Äù but not ‚ÄúJordantown, New Jersey.‚Äù\n\n\ncities_1m <- maps::world.cities %>%\n  # include only cities with more than 1m people\n  filter(pop > 1000000) %>%\n  # remove US cities\n  filter(country.etc != \"USA\") %>%\n  # add regex to city and country names so that results won't return int'l names within a US city\n  mutate(city_regex = paste0(name, \"\\\\b\")) %>%\n  mutate(country_regex = paste0(country.etc, \"\\\\b\"))\n\n# since I'm taking a random sample of five rows, I will use set.seed() to get the same five rows each time the code is run\nset.seed(10)\nsample_n(cities_1m, 5)\n\n      name  country.etc      pop    lat   long capital  city_regex\n1    Kazan       Russia  1104802  55.75  49.13       0    Kazan\\\\b\n2    Delhi        India 11215130  28.67  77.21       0    Delhi\\\\b\n3 Pretoria South Africa  1687779 -25.73  28.22       1 Pretoria\\\\b\n4   Tehran         Iran  7160094  35.67  51.43       1   Tehran\\\\b\n5     Kobe        Japan  1535384  34.68 135.17       0     Kobe\\\\b\n    country_regex\n1       Russia\\\\b\n2        India\\\\b\n3 South Africa\\\\b\n4         Iran\\\\b\n5        Japan\\\\b"
  },
  {
    "objectID": "posts/international-cities-us/index.html#matching-countries",
    "href": "posts/international-cities-us/index.html#matching-countries",
    "title": "International Place Names Inside the U.S.",
    "section": "Matching countries",
    "text": "Matching countries\nTo ‚Äúmatch‚Äù US names to country names:\n\nThe column of country names, which will have repeated names, from the cities_1m dataframe (above) will be separated by a vertical bar (|) so that each country name will be searched for among the column of US names and if found, the US names containing a country name will be ‚Äúextracted‚Äù (i.e.¬†kept) in the final list. This will go in the match column.\nAdd a column containing the continent name based on the country names in the match column using the countrycode package. (source)\n\n\ncountry_matches <- us_muni_edit %>%\n  # match US city to country names\n  mutate(match = str_extract(feature_name, paste(cities_1m$country_regex, collapse=\"|\"))) %>%\n  drop_na(match) %>% # remove US names that did not \"match\" any country name\n  # add continent\n  mutate(continent = countrycode::countrycode(sourcevar = match,\n                                              origin = \"country.name\", \n                                              destination = \"continent\"))\n  # narrow down variables\n\nA sample of the final dataframe of US municipalities that now includes the name of a country.\n\nset.seed(123) # set.seed() lets you see the same random sample each time you run the code\nsample_n(country_matches, 10)\n\n   feature_id               feature_name   feature_class    state_name\n1     1379539                China Creek Populated Place         Texas\n2     1554236                       Cuba Populated Place West Virginia\n3      607936                       Peru Populated Place Massachusetts\n4     2481457            Armenia Terrace Populated Place       Florida\n5      669699                      Egypt Populated Place   Mississippi\n6      490449                       Cuba Populated Place      Kentucky\n7     1049099              Poland Center Populated Place          Ohio\n8      867976                    Lebanon Populated Place New Hampshire\n9      942484 Angola Lake Shore Addition Populated Place      New York\n10      57707                      Egypt Populated Place      Arkansas\n   state_numeric  county_name county_numeric         map_name date_created\n1             48     San Saba            411 Blucher Mountain   11/30/1979\n2             54      Jackson             35       Sandyville   06/27/1980\n3             25    Berkshire              3             Peru   02/24/1974\n4             12 Hillsborough             57  Sulphur Springs   07/18/2008\n5             28       Holmes             51       Montgomery   09/24/1980\n6             21       Graves             83             Cuba   09/20/1979\n7             39     Mahoning             99         Campbell   07/12/1979\n8             33      Grafton              9          Hanover   08/27/1980\n9             36         Erie             29          Farnham   01/23/1980\n10             5    Craighead             31             Cash   04/30/1980\n   date_edited bgn_type bgn_authority bgn_date prim_lat_dms prim_long_dms\n1   06/07/2022                                      311533N      0984723W\n2   06/07/2022                                      385928N      0814008W\n3   12/02/2019                                      422617N      0730245W\n4   06/07/2022                                      280005N      0822910W\n5   06/07/2022                                      332028N      0901638W\n6   06/07/2022                                      363506N      0883745W\n7   09/30/2019                                      410126N      0803402W\n8   06/07/2022                                      433832N      0721506W\n9   09/11/2019                                      423705N      0790554W\n10  06/07/2022                                      355205N      0905644W\n   prim_lat_dec prim_long_dec   match continent\n1      31.25906     -98.78977   China      Asia\n2      38.99119     -81.66902    Cuba  Americas\n3      42.43814     -73.04593    Peru  Americas\n4      28.00140     -82.48600 Armenia      Asia\n5      33.34123     -90.27731   Egypt    Africa\n6      36.58506     -88.62922    Cuba  Americas\n7      41.02395     -80.56729  Poland    Europe\n8      43.64229     -72.25176 Lebanon      Asia\n9      42.61811     -79.09837  Angola    Africa\n10     35.86813     -90.94568   Egypt    Africa"
  },
  {
    "objectID": "posts/international-cities-us/index.html#matching-international-cities",
    "href": "posts/international-cities-us/index.html#matching-international-cities",
    "title": "International Place Names Inside the U.S.",
    "section": "Matching international cities",
    "text": "Matching international cities\nFollowing the same steps above, this time matching US municipalities to international city names. And:\n\nJoining this dataframe with the cities_1m in order to include the country for each city.\nAs ‚ÄúSerbia and Montenegro‚Äù was given as the country for ‚ÄúBelgrade‚Äù, changing the name to ‚ÄúSerbia‚Äù.\n\n\ncity_matches <- us_muni_edit %>%\n  # match US city to int'l city names\n  mutate(match = str_extract(feature_name, paste(cities_1m$city_regex, collapse=\"|\"))) %>%\n  drop_na(match) %>%\n  # add country to match (city)\n  left_join(cities_1m, by = c(\"match\" = \"name\")) %>%\n  select(-lat, -long) %>% # removing these cols from cities_1m to avoid confusion\n  # change \"Serbia and Montenegro\" to \"Serbia\"\n  mutate(country.etc = str_replace(country.etc, \"Serbia and Montenegro\", \"Serbia\")) %>%\n  # add continent\n  mutate(continent = countrycode::countrycode(sourcevar = country.etc,\n                                              origin = \"country.name\", \n                                              destination = \"continent\")) %>%\n  # add coordinates for the int'l cities using tidygeocoder pkg\n  mutate(address = paste0(match, \", \", country.etc)) %>%\n  geocode(address, method=\"osm\", lat=city_lat, long=city_long) %>%\n  # narrow down columns\n  select(us_city=feature_name, state_name, us_city_lat=prim_lat_dec, us_city_long=prim_long_dec, intl_city=match, country=country.etc, city_lat, city_long, continent)\n\nPassing 71 addresses to the Nominatim single address geocoder\n\n\nQuery completed in: 71.3 seconds\n\n\nA sample of the final dataframe for US towns and cities containing the names of international cities.\n\n# see sample of result\nset.seed(123)\nsample_n(city_matches, 10)\n\n# A tibble: 10 √ó 9\n   us_city       state‚Ä¶¬π us_ci‚Ä¶¬≤ us_ci‚Ä¶¬≥ intl_‚Ä¶‚Å¥ country city_‚Ä¶‚Åµ city_‚Ä¶‚Å∂ conti‚Ä¶‚Å∑\n   <chr>         <chr>     <dbl>   <dbl> <chr>   <chr>     <dbl>   <dbl> <chr>  \n 1 New London    North ‚Ä¶    35.4   -80.2 London  UK         51.5  -0.128 Europe \n 2 Delhi         Ohio       39.1   -84.6 Delhi   India      28.6  77.2   Asia   \n 3 Tripoli       Iowa       42.8   -92.3 Tripoli Libya      32.9  13.2   Africa \n 4 Paris Point   South ‚Ä¶    34.9   -82.4 Paris   France     48.9   2.35  Europe \n 5 Hamburg       Kansas     38.1   -99.2 Hamburg Germany    53.6  10.0   Europe \n 6 Brussels      Illino‚Ä¶    38.9   -90.6 Brusse‚Ä¶ Belgium    50.8   4.35  Europe \n 7 Melbourne     Missou‚Ä¶    40.1   -93.8 Melbou‚Ä¶ Austra‚Ä¶   -37.8 145.    Oceania\n 8 North Belgra‚Ä¶ Maine      44.5   -69.8 Belgra‚Ä¶ Serbia     44.8  20.5   Europe \n 9 New London    Maryla‚Ä¶    39.4   -77.3 London  UK         51.5  -0.128 Europe \n10 Prague        Arkans‚Ä¶    34.3   -92.3 Prague  Czech ‚Ä¶    50.1  14.4   Europe \n# ‚Ä¶ with abbreviated variable names ¬π‚Äãstate_name, ¬≤‚Äãus_city_lat, ¬≥‚Äãus_city_long,\n#   ‚Å¥‚Äãintl_city, ‚Åµ‚Äãcity_lat, ‚Å∂‚Äãcity_long, ‚Å∑‚Äãcontinent"
  },
  {
    "objectID": "posts/international-cities-us/index.html#one-final-thing",
    "href": "posts/international-cities-us/index.html#one-final-thing",
    "title": "International Place Names Inside the U.S.",
    "section": "One Final Thing",
    "text": "One Final Thing\nAfter exporting city_matches via write_csv(city_matches, \"city_matches.csv\"), I used D3.js to create a map that lets users click a major non-US city and see the locations of US towns and cities that share the name. I‚Äôll save country_matches maybe for another time.\nTo end this post, here are the top 10 international cities that appear most frequently as or within US municipality names:\n\ncity_matches %>% count(intl_city, sort=T)\n\n# A tibble: 71 √ó 2\n   intl_city     n\n   <chr>     <int>\n 1 Berlin       57\n 2 London       49\n 3 Paris        46\n 4 Dublin       38\n 5 Rome         37\n 6 Hamburg      35\n 7 Leon         33\n 8 Cairo        30\n 9 Vienna       29\n10 Damascus     27\n# ‚Ä¶ with 61 more rows"
  },
  {
    "objectID": "posts/chocolate-bars/index.html",
    "href": "posts/chocolate-bars/index.html",
    "title": "Chocolate Bars",
    "section": "",
    "text": "For the week of January 18, 2022, #TidyTuesday featured the ‚ÄúChocolate Bar Ratings‚Äù dataset from Flavors of Cacao. The reviews span from 2006 through 2022 and for each bar, details include the manufacturer and their location, the chocolate bean origin, ingredients and keyword-descriptions of each bar‚Äôs ‚Äúmost memorable characteristics, and of course, the rating.\nAs noted on the website, the chocolate included in the ratings database are a sampling of bars, not a comprehensive assessment of chocolate bars but rather rating dark chocolate bars based on one bar.\n\n\n\n\n\n\nEach chocolate is evaluated from a combination of both objective qualities and subjective interpretation. A rating here only represents an experience with one bar from one batch.  (‚Ä¶)  The database is narrowly focused on plain dark chocolate with an aim of appreciating the flavors of the cacao when made into chocolate.\n\n\n\nLooking at a glimpse of the dataset‚Ä¶\n\nlibrary(tidyverse)\nchocolate_raw <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-18/chocolate.csv')\n\nglimpse(chocolate_raw)\n\nRows: 2,530\nColumns: 10\n$ ref                              <dbl> 2454, 2458, 2454, 2542, 2546, 2546, 2‚Ä¶\n$ company_manufacturer             <chr> \"5150\", \"5150\", \"5150\", \"5150\", \"5150‚Ä¶\n$ company_location                 <chr> \"U.S.A.\", \"U.S.A.\", \"U.S.A.\", \"U.S.A.‚Ä¶\n$ review_date                      <dbl> 2019, 2019, 2019, 2021, 2021, 2021, 2‚Ä¶\n$ country_of_bean_origin           <chr> \"Tanzania\", \"Dominican Republic\", \"Ma‚Ä¶\n$ specific_bean_origin_or_bar_name <chr> \"Kokoa Kamili, batch 1\", \"Zorzal, bat‚Ä¶\n$ cocoa_percent                    <chr> \"76%\", \"76%\", \"76%\", \"68%\", \"72%\", \"8‚Ä¶\n$ ingredients                      <chr> \"3- B,S,C\", \"3- B,S,C\", \"3- B,S,C\", \"‚Ä¶\n$ most_memorable_characteristics   <chr> \"rich cocoa, fatty, bready\", \"cocoa, ‚Ä¶\n$ rating                           <dbl> 3.25, 3.50, 3.75, 3.00, 3.00, 3.25, 3‚Ä¶\n\n\n‚Ä¶here are some initial observations about the variables:\n\n\n\n\n\n\n\n\n\nVariable\nDetails\n\n\n\n\nManufacturer\n580 companies\n\n\nCompany location\n67 countries\n\n\nYear of review\n2006-2021\n\n\nCountry where bean originated\n62 countries\n\n\nCocoa %\nseeds (or beans) that produce chocolate\n\n\nIngredients\nB = beans, S = sugar, S* = sweetener (not white cane or beet sugar), C = cocoa butter, V = vanilla, L = lecithin, Sa = salt\n\n\nMost memorable characteristics\nkeywords\n\n\nRating\n1-4"
  },
  {
    "objectID": "posts/chocolate-bars/index.html#world-map",
    "href": "posts/chocolate-bars/index.html#world-map",
    "title": "Chocolate Bars",
    "section": "World Map",
    "text": "World Map\nAfter exploring the data, I went with mapping the countries in the dataset, color coding them by whether they:\n\nonly appear as the location of a manufacturing company\nonly appear as a bean origin country\nor both\n\n\n# Are there countries that appear in both columns? (33) Use #C0EDA6\ncountries_both <- chocolate_raw %>%\n  select(company_location, country_of_bean_origin) %>%\n  unique() %>%\n  # isolate countries in company_location that also appear in country_of_bean_origin\n  filter(company_location %in% unique(country_of_bean_origin)) %>%\n  # isolate only company_location and rename\n  select(country=company_location) %>%\n  unique() %>%\n  # add column that gives it green color to signify it appears in both vars\n  add_column(country_type=\"both\")\n\n# countries that appear only in company_location (34) Use #8FBDD3\ncountries_manufacturer <- chocolate_raw %>%\n  select(company_location, country_of_bean_origin) %>%\n  unique() %>%\n  filter(!company_location %in% unique(country_of_bean_origin)) %>%\n  select(country=company_location) %>%\n  unique() %>%\n  add_column(country_type=\"manufacturer\")\n\n# countries that appear only in country_of_bean_origin (29) Use #FFF7BC\nbean_countries <- chocolate_raw %>%\n  select(company_location, country_of_bean_origin) %>%\n  unique() %>%\n  filter(!country_of_bean_origin %in% unique(company_location)) %>%\n  select(country=country_of_bean_origin) %>%\n  unique() %>%\n  add_column(country_type=\"bean origin\")\n\n# combine above three into one df\nchocolate_map <- rbind(countries_both, countries_manufacturer, bean_countries)\n\n\n1. Load world map via rnaturalearth\n\nlibrary(rnaturalearth)\nworld_map <- ne_countries(scale=\"medium\",\n                          type=\"map_units\", # to include Mauritania\n                          returnclass=\"sf\")\n\nggplot() +\n  geom_sf(data=world_map, size=0.25, fill=\"#eeeeee\") +\n  theme_void()\n\n\n\n\n\n\n\n2. Data cleaning\n\nCheck if any country names in world_map and chocolate_map do not match, i.e.¬†Which country names in world_map do not appear in chocolate_map due to spelling differences or more granular divisions within what world_map considers a country. Goal: Create a layer of just the countries in chocolate_map to ‚Äúlayer‚Äù on top of the world_map basemap.\n\n\nchocolate_map %>% filter(!country %in% unique(world_map$geounit))\n\n# A tibble: 18 √ó 2\n   country               country_type\n   <chr>                 <chr>       \n 1 U.S.A.                both        \n 2 Sao Tome              both        \n 3 St. Lucia             both        \n 4 Sao Tome & Principe   both        \n 5 St.Vincent-Grenadines both        \n 6 U.K.                  manufacturer\n 7 Belgium               manufacturer\n 8 Amsterdam             manufacturer\n 9 U.A.E.                manufacturer\n10 Burma                 bean origin \n11 Trinidad              bean origin \n12 Blend                 bean origin \n13 Congo                 bean origin \n14 Tobago                bean origin \n15 Sumatra               bean origin \n16 Principe              bean origin \n17 Sulawesi              bean origin \n18 DR Congo              bean origin \n\n\n\n\nRenaming countries in chocolate_map to how they appear in world_map.\n\n\nchocolate_map_edit <- chocolate_map %>%\n  # rename countries\n  mutate(country = str_replace_all(\n    country,\n    c(\n      \"U.S.A.\" = \"United States of America\", # old = new\n      \"Sao Tome$\" = \"Sao Tome and Principe\",\n      \"St. Lucia\" = \"Saint Lucia\",\n      \"Sao Tome & Principe\" = \"Sao Tome and Principe\",\n      \"St.Vincent-Grenadines\" = \"Saint Vincent and the Grenadines\",\n      \"U.A.E.\" = \"United Arab Emirates\",\n      \"Burma\" = \"Myanmar\",\n      \"^Trinidad$\" = \"Trinidad and Tobago\",\n      \"^Congo$\" = \"Republic of Congo\",\n      \"^Tobago$\" = \"Trinidad and Tobago\",\n      \"^Principe$\" = \"Sao Tome and Principe\",\n      \"DR Congo\" = \"Democratic Republic of the Congo\"\n    )\n  )) %>%\n  # renaming \"non-countries\" as the country in which they're located\n  mutate(country = str_replace_all(\n    country,\n    c(\n      \"Amsterdam\" = \"Netherlands\",\n      \"Sumatra\" = \"Indonesia\",\n      \"Sulawesi\" = \"Indonesia\"\n    )\n  )) %>%\n  # remove country of \"Blend\" and also \"Scotland\" and \"Wales\" as the latter two will be represented by \"United Kingdom\" (all three are only manufacturing countries, plus \"England\" and \"Northern Ireland\" were not included in the chocolate data)\n  filter(!country %in% c(\"Blend\", \"Scotland\", \"Wales\")) %>%\n  # renamings will produce duplicates so remove those\n  unique()\n\n\n\nCheck: Rerun code from a to see if any countries from chocolate_map remain off of world_map.\n\n\nchocolate_map %>% filter(!country %in% unique(world_map$geounit))\n\n# A tibble: 18 √ó 2\n   country               country_type\n   <chr>                 <chr>       \n 1 U.S.A.                both        \n 2 Sao Tome              both        \n 3 St. Lucia             both        \n 4 Sao Tome & Principe   both        \n 5 St.Vincent-Grenadines both        \n 6 U.K.                  manufacturer\n 7 Belgium               manufacturer\n 8 Amsterdam             manufacturer\n 9 U.A.E.                manufacturer\n10 Burma                 bean origin \n11 Trinidad              bean origin \n12 Blend                 bean origin \n13 Congo                 bean origin \n14 Tobago                bean origin \n15 Sumatra               bean origin \n16 Principe              bean origin \n17 Sulawesi              bean origin \n18 DR Congo              bean origin \n\n\n\n\nRemove\n\n\nchocolate_map_edit <- chocolate_map_edit %>% filter(!country %in% c(\"U.K.\", \"Belgium\"))\n\n\n\nWorkaround: Add a third layer for Belgium and the UK since their geounit in world_map was of regions within those countries so using the admin column here in place of geounit as used above.\n\n\nchocolate_map <- chocolate_map %>%\n  mutate(country = str_replace(country, \"U.K.\", \"United Kingdom\"))\n\nbel_uk_layer <- world_map %>%\n  filter(admin %in% c(\"Belgium\", \"United Kingdom\")) %>%\n  left_join(chocolate_map, by=c(\"admin\"=\"country\"))\n\n\n\nright_join() the world_map and chocolate_map_edit dataframes in order to add geographic components to chocolate_map_edit.\n\n\ncombo_map <- world_map %>% right_join(chocolate_map_edit, by=c(\"geounit\"=\"country\"))\n\n\n\n3. Chocolate map\nAdding the three layers: (1) world_map: Base world map + (2) combo_map: Countries from the chocolate data + (3) bel_uk_layer: Belgium and the UK\n\nggplot() +\n  geom_sf(data=world_map, size=0.25, fill=\"#eeeeee\") +\n  geom_sf(data=combo_map, aes(fill=country_type), size=0.25, show.legend=F) +\n  geom_sf(data=bel_uk_layer, aes(fill=country_type), size=0.25, show.legend=F) +\n  scale_fill_manual(values = c(\"both\" = \"#C0EDA6\", # df value = color\n                               \"manufacturer\" = \"#8FBDD3\",\n                               \"bean origin\" = \"#FFF7BC\")) +\n  theme_void()"
  },
  {
    "objectID": "posts/chocolate-bars/index.html#out-of-curiosity",
    "href": "posts/chocolate-bars/index.html#out-of-curiosity",
    "title": "Chocolate Bars",
    "section": "Out of Curiosity",
    "text": "Out of Curiosity\nAre there words disproportionately associated with a country where a bean originated or a a country of the manufacturing company?\n\nlibrary(tidytext)\n\nchocolate_raw %>%\n  unnest_tokens(word, most_memorable_characteristics) %>%\n  count(country_of_bean_origin, word, sort = TRUE) %>%\n  bind_tf_idf(term = word, document = country_of_bean_origin, n) %>% # calculates TF-IDF\n  arrange(desc(tf_idf)) %>%\n  #top_n(20, wt = tf_idf) %>%\n  filter(n>20)\n\n# A tibble: 36 √ó 6\n   country_of_bean_origin word       n     tf   idf tf_idf\n   <chr>                  <chr>  <int>  <dbl> <dbl>  <dbl>\n 1 Papua New Guinea       smoke     27 0.155  1.13  0.176 \n 2 Ecuador                floral    82 0.112  0.795 0.0893\n 3 Madagascar             red       25 0.0394 1.82  0.0719\n 4 Madagascar             sour      44 0.0694 0.631 0.0438\n 5 Venezuela              nutty     88 0.102  0.389 0.0397\n 6 Madagascar             tart      23 0.0363 1.08  0.0393\n 7 Blend                  bitter    24 0.0440 0.795 0.0350\n 8 Ecuador                bitter    30 0.0411 0.795 0.0327\n 9 Blend                  sweet     31 0.0569 0.490 0.0278\n10 Madagascar             fruit     36 0.0568 0.490 0.0278\n# ‚Ä¶ with 26 more rows\n\nchocolate_raw %>%\n  unnest_tokens(word, most_memorable_characteristics) %>%\n  #count(word, country_of_bean_origin, sort = TRUE) %>%\n  count(word, company_location, sort = TRUE) %>%\n  filter(word == \"smoke\")\n\n# A tibble: 14 √ó 3\n   word  company_location     n\n   <chr> <chr>            <int>\n 1 smoke U.S.A.              26\n 2 smoke France              10\n 3 smoke Canada               5\n 4 smoke Italy                4\n 5 smoke New Zealand          4\n 6 smoke Australia            3\n 7 smoke U.K.                 3\n 8 smoke Austria              2\n 9 smoke Colombia             2\n10 smoke Japan                2\n11 smoke Ecuador              1\n12 smoke Germany              1\n13 smoke U.A.E.               1\n14 smoke Venezuela            1\n\n# instead of going by word units, break up by placement of comma => there will be one word, two words, etc.\nchocolate_raw %>%\n  select(most_memorable_characteristics, rating) %>%\n  # split at comma\n  separate_rows(most_memorable_characteristics, sep = ',', convert = TRUE) %>%\n  #filter(str_detect(most_memorable_characteristics, regex(\" \"))) %>%\n  group_by(most_memorable_characteristics) %>%\n  summarize(characteristic_count = n(), mean_rating = median(rating)) %>%\n  filter(characteristic_count>20) %>% arrange(desc(mean_rating))\n\n# A tibble: 71 √ó 3\n   most_memorable_characteristics characteristic_count mean_rating\n   <chr>                                         <int>       <dbl>\n 1 \" banana\"                                        33         3.5\n 2 \" cherry\"                                        27         3.5\n 3 \" citrus\"                                        21         3.5\n 4 \" cocoa\"                                        210         3.5\n 5 \" creamy\"                                        26         3.5\n 6 \" dairy\"                                         34         3.5\n 7 \" dried fruit\"                                   46         3.5\n 8 \" fruity\"                                        37         3.5\n 9 \" honey\"                                         26         3.5\n10 \" melon\"                                         22         3.5\n# ‚Ä¶ with 61 more rows\n\nchocolate_raw %>%\n  separate_rows(most_memorable_characteristics, sep = ',', convert = TRUE) %>%\n  mutate(most_memorable_characteristics = str_squish(most_memorable_characteristics)) %>%\n  count(country_of_bean_origin, most_memorable_characteristics, sort = TRUE) %>%\n  bind_tf_idf(term = most_memorable_characteristics, document = country_of_bean_origin, n) %>%\n  arrange(desc(tf_idf)) %>%\n  filter(n>20)\n\n# A tibble: 21 √ó 6\n   country_of_bean_origin most_memorable_characteris‚Ä¶¬π     n     tf   idf tf_idf\n   <chr>                  <chr>                        <int>  <dbl> <dbl>  <dbl>\n 1 Ecuador                floral                          72 0.12   0.831 0.0998\n 2 Venezuela              nutty                           84 0.116  0.414 0.0481\n 3 Madagascar             sour                            27 0.0557 0.795 0.0443\n 4 Blend                  sweet                           27 0.0609 0.490 0.0298\n 5 Venezuela              creamy                          33 0.0457 0.601 0.0275\n 6 Blend                  cocoa                           26 0.0587 0.438 0.0257\n 7 Dominican Republic     earthy                          35 0.0546 0.464 0.0253\n 8 Ecuador                spicy                           21 0.035  0.693 0.0243\n 9 Venezuela              roasty                          33 0.0457 0.516 0.0236\n10 Dominican Republic     spicy                           21 0.0328 0.693 0.0227\n# ‚Ä¶ with 11 more rows, and abbreviated variable name\n#   ¬π‚Äãmost_memorable_characteristics"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Exploring datasets from the Tidy Tuesday community project and other sources, and putting together coding reference sheets\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nA Eurovision History\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\n\n\nA look into the dataset reveals how the song competition has changed in the more than 65-year duration.\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChocolate Bars\n\n\n\n\n\n\n\nTidy Tuesday\n\n\nR\n\n\nmap\n\n\n\n\nA color-coded world map made from a set of chocolate bar ratings.\n\n\n\n\n\n\nMar 28, 2022\n\n\n\n\n\n\n  \n\n\n\n\nInternational Place Names Inside the U.S.\n\n\n\n\n\n\n\nmap\n\n\nR\n\n\n\n\nIdentifying US municipalities that are a name, or part of their name, with that of a country or international city.\n\n\n\n\n\n\nJul 27, 2021\n\n\n\n\n\n\nNo matching items"
  }
]